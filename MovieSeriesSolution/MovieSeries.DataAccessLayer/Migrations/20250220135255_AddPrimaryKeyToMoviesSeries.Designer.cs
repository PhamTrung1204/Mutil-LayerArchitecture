// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSeries.DataAccessLayer;

#nullable disable

namespace MovieSeries.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250220135255_AddPrimaryKeyToMoviesSeries")]
    partial class AddPrimaryKeyToMoviesSeries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.MovieSeriesTag", b =>
                {
                    b.Property<int>("movie_series_id")
                        .HasColumnType("int");

                    b.Property<int>("tag_id")
                        .HasColumnType("int");

                    b.HasKey("movie_series_id", "tag_id");

                    b.HasIndex("tag_id");

                    b.ToTable("MovieSeriesTags");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.MoviesSeries", b =>
                {
                    b.Property<int>("movie_series_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("movie_series_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("release_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("movie_series_id");

                    b.ToTable("MovieSeries");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.Ratings", b =>
                {
                    b.Property<int>("rating_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rating_id"));

                    b.Property<int>("movie_series_id")
                        .HasColumnType("int");

                    b.Property<decimal>("rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id1")
                        .HasColumnType("int");

                    b.HasKey("rating_id");

                    b.HasIndex("user_id1");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.Review", b =>
                {
                    b.Property<int>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("review_id"));

                    b.Property<int>("movie_series_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("review_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("review_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<int?>("user_id1")
                        .HasColumnType("int");

                    b.HasKey("review_id");

                    b.HasIndex("user_id1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.Tag", b =>
                {
                    b.Property<int>("tag_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tag_id"));

                    b.Property<string>("tag_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tag_id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.MovieSeriesTag", b =>
                {
                    b.HasOne("MovieSeries.CoreLayer.Entities.MoviesSeries", "MovieSeries")
                        .WithMany("MovieSeriesTags")
                        .HasForeignKey("movie_series_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSeries.CoreLayer.Entities.Tag", "Tag")
                        .WithMany("MovieSeriesTags")
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieSeries");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.Ratings", b =>
                {
                    b.HasOne("MovieSeries.CoreLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("user_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.Review", b =>
                {
                    b.HasOne("MovieSeries.CoreLayer.Entities.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("user_id1");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.MoviesSeries", b =>
                {
                    b.Navigation("MovieSeriesTags");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.Tag", b =>
                {
                    b.Navigation("MovieSeriesTags");
                });

            modelBuilder.Entity("MovieSeries.CoreLayer.Entities.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
